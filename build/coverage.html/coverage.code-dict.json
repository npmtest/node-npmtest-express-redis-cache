{"/home/travis/build/npmtest/node-npmtest-express-redis-cache/test.js":"/* istanbul instrument in package npmtest_express_redis_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/lib.npmtest_express_redis_cache.js":"/* istanbul instrument in package npmtest_express_redis_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_redis_cache = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_redis_cache = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-redis-cache && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_redis_cache */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_redis_cache\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_redis_cache.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_redis_cache.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_redis_cache.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_redis_cache.__dirname + '/lib.npmtest_express_redis_cache.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/index.js":"/**\n *  <   M   A   I   N   >\n *\n *  npm main\n */\n\n! function () {\n\n  'use strict';\n\n  module.exports = require('./lib/ExpressRedisCache').init;\n\n}();\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache.js":"module.exports = (function () {\n\n  'use strict';\n\n  var config = require('../package.json').config;\n\n  /**  ExpressRedisCache\n   *\n   *  @class\n   *  @description Main class\n   *  @extends EventEmitter\n   *  @arg {Object} options? - Options (view README)\n   */\n\n  function ExpressRedisCache (options) {\n\n    /** The request options\n     *\n     *  @type Object\n     */\n\n    this.options = options || {};\n\n    /** The entry name prefix\n     *\n     *  @type String\n     */\n\n    this.prefix = this.options.prefix || config.prefix;\n\n    /** The host to connect to (default host if null)\n     *\n     *  @type String\n     */\n\n    this.host = this.options.host || \"localhost\";\n\n    /** The port to connect to (default port if null)\n     *\n     *  @type Number\n     */\n\n    this.port = this.options.port || \"6379\";\n\n    /** The password of Redis server (optional)\n     *\n     *  @type String\n     */\n     this.auth_pass = this.options.auth_pass;\n\n    /** An alias to disable expiration for a specific route\n     *\n     *  var cache = new ExpressRedisCache();\n     *  cache.route('page', cache.FOREVER); // cache will not expire\n     *\n     *  @type number\n     */\n\n    this.FOREVER = -1;\n\n    /** Set expiration time in seconds, default is -1 (No expire)\n     *  @type number\n     */\n\n    this.expire = this.options.expire || this.FOREVER;\n\n    /** Whether or not express-redis-cache is connected to Redis\n     *\n     *  @type Boolean\n     */\n\n    this.connected = false;\n\n    /** The Redis Client\n     *\n     *  @type Object (preferably a client from the official Redis module)\n     */\n\n    this.client = this.options.client || require('redis').createClient(this.port, this.host, { auth_pass: this.auth_pass });\n\n    /** If client can emit */\n\n    if ( this.client.on ) {\n      this.client.on('error', function (error) {\n        this.emit('error', error);\n      }.bind(this));\n\n      this.client.on('connect', function () {\n        this.connected = true;\n        this.emit('connected', { host: this.host, port: this.port });\n        this.emit('message', 'OK connected to redis://' + this.client.address);\n      }.bind(this));\n\n      this.client.on('end', function () {\n        this.connected = false;\n        this.emit('disconnected', { host: this.host, port: this.port });\n        this.emit('message', 'Disconnected from redis://' + this.client.host + ':' + this.client.port);\n      }.bind(this));\n    }\n  }\n\n  /** Extend Event Emitter */\n\n  require('util').inherits(ExpressRedisCache, require('events').EventEmitter);\n\n  /**  js-comment\n   *\n   *  @method\n   *  @description Get -\n   *  @return void{Object}\n   *  @arg {Object} arg - About arg\n   */\n\n  ExpressRedisCache.prototype.get = require('./ExpressRedisCache/get');\n\n  /**  js-comment\n   *\n   *  @method\n   *  @description This is a method\n   *  @return void{Object}\n   *  @arg {Object} arg - About arg\n   */\n\n  ExpressRedisCache.prototype.add = require('./ExpressRedisCache/add');\n\n  /**  js-comment\n   *\n   *  @method\n   *  @description This is a method\n   *  @return void{Object}\n   *  @arg {Object} arg - About arg\n   */\n\n  ExpressRedisCache.prototype.del = require('./ExpressRedisCache/del');\n\n  /**  js-comment\n   *\n   *  @method\n   *  @description This is a method\n   *  @return void{Object}\n   *  @arg {Object} arg - About arg\n   */\n\n  ExpressRedisCache.prototype.route = require('./ExpressRedisCache/route');\n\n  /**  js-comment\n   *\n   *  @method\n   *  @description This is a method\n   *  @return void{Object}\n   *  @arg {Object} arg - About arg\n   */\n\n  ExpressRedisCache.prototype.size = require('./ExpressRedisCache/size');\n\n  /**  js-comment\n   *\n   *  @function\n   *  @description Factory for ExpressRedisCache\n   *  @return ExpressRedisCache\n   *  @arg {Object} arg - About arg\n   */\n\n  ExpressRedisCache.init = function (options) {\n    return new ExpressRedisCache(options);\n  };\n\n  return ExpressRedisCache;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache/get.js":"module.exports = (function () {\n\n  'use strict';\n\n  /**  Get\n   *\n   *  @function\n   *  @description\n   *  @return void\n   *  @callback\n   *  @arg {String} name - The cache entry name to get (wildcards accepted)\n   *  @arg {Function} callback - Callback\n   */\n\n  function get (name, callback) {\n    var self = this;\n\n    var domain = require('domain').create();\n\n    domain.on('error', function (error) {\n      self.emit('error', error);\n      callback(error);\n      domain.exit();\n    });\n\n    domain.run(function () {\n\n\n      if ( typeof name === 'function' ) {\n        callback = name;\n        name = '*';\n      }\n\n      var prefix = self.prefix.match(/:$/) ? self.prefix.replace(/:$/, '')\n        : self.prefix;\n\n      self.client.keys(prefix + ':' + name, domain.intercept(function (keys) {\n        if ( ! keys.length ) {\n          callback(null, []);\n          return domain.exit();\n        }\n\n        require('async').parallel(keys.map(function (key) {\n          return function (cb) {\n            self.client.hgetall(key, domain.intercept(function (result) {\n              var names = key.split(':');\n              result.name = names[1];\n              result.prefix = names[0];\n              self.emit('message', require('util').format('GET %s ~%d Kb', key,\n                (require('../sizeof')(result) / 1024).toFixed(2)));\n              cb(null, result);\n            }));\n          };\n        }), domain.intercept(function (results) {\n          callback(null, results);\n          domain.exit();\n        }));\n      }));\n\n    });\n  }\n\n  return get;\n\n}) ();\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache/add.js":"module.exports = (function () {\n\n  'use strict';\n\n  var config = require('../../package.json').config;\n\n  /**  Add\n   *\n   *  @function\n   *  @description Add a new cache entry\n   *  @return void\n   *  @callback\n   *  @arg {String} name - The cache entry name\n   *  @arg {String} body - The cache entry body\n   *  @arg {Object} options - Optional { type: String, expire: Number }\n   *  @arg {Number} expire - The cache life time in seconds [OPTIONAL]\n   *  @arg {Function} callback\n   */\n\n  function add (name, body, options, callback) {\n    var self = this;\n\n    /** Adjust arguments in case @options is omitted **/\n    if ( ! callback && (typeof options === 'function') ) {\n      callback = options;\n      options = {};\n    }\n\n    var domain = require('domain').create();\n\n    domain.on('error', domain.bind(function (error) {\n      self.emit('error', error);\n      self.connected = false;\n      callback(error);\n    }));\n\n    domain.run(function () {\n\n      if (self.connected === false) {\n        return callback(null, []); // simulate cache miss\n      }\n\n      /** The new cache entry **/\n      var entry = {\n        body: body,\n        type: options.type || config.type,\n        touched: +new Date(),\n        expire: (typeof options.expire !== 'undefined' && options.expire !== false) ? options.expire : self.expire\n      };\n\n      var size = require('../sizeof')(entry);\n\n      var prefix = self.prefix.match(/:$/) ? self.prefix.replace(/:$/, '')\n        : self.prefix;\n\n      /* Save as a Redis hash */\n      var redisKey = prefix + ':' + name;\n      self.client.hmset(redisKey, entry,\n        domain.intercept(function (res) {\n          var calculated_size = (size / 1024).toFixed(2);\n          /** If @expire then tell Redis to expire **/\n          if ( typeof entry.expire === 'number' && entry.expire > 0 ) {\n            self.client.expire(redisKey, +entry.expire,\n              domain.intercept(function () {\n                self.emit('message', require('util').format('SET %s ~%d Kb %d TTL (sec)', redisKey, calculated_size, +entry.expire));\n                callback(null, name, entry, res);\n              }));\n          }\n          else\n          {\n            self.emit('message', require('util').format('SET %s ~%d Kb', redisKey, calculated_size));\n            callback(null, name, entry, res);\n          }\n        }));\n    });\n  }\n\n  return add;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache/del.js":"module.exports = (function () {\n\n  'use strict';\n\n  /**  Delete cache entries\n   *\n   *  @method ExpressRedisCache.del\n   *  @description Delete entry by name\n   *  @return null\n   *  @arg {String} name - The entry name\n   *  @arg {Function} callback\n   */\n\n  function del (name, callback) {\n    var self = this;\n\n    if ( typeof name !== 'string' ) {\n      return this.emit('error', new Error('ExpressRedisCache.del: missing first argument String'));\n    }\n\n    if ( typeof callback !== 'function' ) {\n      return this.emit('error', new Error('ExpressRedisCache.del: missing second argument Function'));\n    }\n\n    var domain = require('domain').create();\n\n    domain.on('error', function onDelError (error) {\n      callback(error);\n    });\n\n    domain.run(function delRun () {\n\n      /** Get prefix */\n\n      var prefix = self.prefix.match(/:$/) ? self.prefix.replace(/:$/, '')\n        : self.prefix;\n\n      /** Tell Redis to delete hash */\n\n      var redisKey = prefix + ':' + name;\n\n      /** Detect wilcard syntax */\n\n      var hasWildcard = redisKey.indexOf('*') >= 0;\n\n      /** If has wildcard */\n\n      if ( hasWildcard ) {\n\n        /** Get a list of keys using the wildcard */\n\n        self.client.keys(redisKey, domain.intercept(function onKeys (keys) {\n\n          require('async').each(keys,\n\n            function onEachKey (key, callback) {\n              self.client.del(key,  domain.intercept(function () {\n                self.emit('message', require('util').format('DEL %s', key));\n                callback();\n              }));\n            },\n\n            function onEachKeyDone (error) {\n\n              if ( error ) {\n                throw error;\n              }\n\n              callback(null, keys.length);\n\n            });\n\n        }));\n\n      }\n\n      /** No wildcard **/\n\n      else {\n        self.client.del(redisKey,\n          domain.intercept(function onKeyDeleted (deletions) {\n            self.emit('message', require('util').format('DEL %s', redisKey));\n            callback(null, +deletions);\n          }));\n      }\n\n    });\n  }\n\n  return del;\n\n})();","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache/route.js":"module.exports = (function () {\n\n  'use strict';\n\n  /** route() - Create a middleware\n   *\n   *  @method ExpressRedisCache.route\n   *  @return {Function} middleware\n   */\n\n  function route () {\n\n    /** The middleware to return\n     *\n     *  @type Function\n     */\n\n    var middleware;\n\n    /** A reference to this\n     *\n     *  @type ExpressRedisCache\n     */\n\n    var self = this;\n\n    /** The route options\n     *\n     *  @type List\n     */\n\n    var options = arguments;\n\n    /** The domain handler\n     *\n     *  @type Domain\n     */\n\n    var domain = require('domain').create();\n\n    /** The domain error handler\n     *\n     *  @type Domain\n     */\n\n    domain.on('error', function (error) {\n      self.emit('error', error);\n    });\n\n    domain.run(function () {\n      // Build the middleware function\n\n      /**\n       *  @function\n       *  @arg {IncomingMessage} req\n       *  @arg {HttpResponse} res\n       *  @arg {Function} next\n       */\n\n      middleware = function expressRedisCache_Middleware (req, res, next) {\n\n        if ( res.expressRedisCache ) {\n          self.emit('deprecated', {\n            deprecated: 'expressRedisCache',\n            substitute: 'use_express_redis_cache',\n            file: __fileName,\n            line: __line\n          });\n\n          res.use_express_redis_cache = res.expressRedisCache;\n\n        }\n\n        // If cache is disabled, call next()\n        if ( res.use_express_redis_cache === false ) {\n          return next();\n        }\n\n        // If the cache isn't connected, call next()\n\n        if ( self.connected === false || self.client.connected === false ) {\n          return next();\n        }\n\n        // If the cache gets disconnected, call next()\n        /* NOTE: The disconnected event is emitted after any redis client completes it's configured max_attempts and delay throttling.\n\n        This will throw a nasty error regarding headers when this occurs along the lines of:\n            Error: Can't set headers after they are sent. \n              at ServerResponse.OutgoingMessage.setHeader...\n\n           ...but it will allow the request to be completed without blocking.  Subsequent requests pass through as self.connected is false.\n        */\n        self.on('disconnected', function () {\n          return next();\n        });\n\n        /** Cache entry name\n         *\n         *  @type String\n         *  @description The name the cache entry will be saved under\n         *  @default req.originalUrl\n         */\n\n        var name = req.originalUrl;\n\n        /**\n         *  @deprecated `res.expressRedisCacheName` is deprecated starting on v0.1.1, `use res.express_redis_cache_name` instead\n         */\n\n        if ( res.expressRedisCacheName ) {\n          self.emit('deprecated', {\n            deprecated: 'expressRedisCacheName',\n            substitute: 'express_redis_cache_name',\n            file: __fileName,\n            line: __line\n          });\n\n          res.express_redis_cache_name = res.expressRedisCacheName;\n        }\n\n        // If a cache has been explicitly attached to `res` then use it as name\n\n        if ( res.express_redis_cache_name ) {\n          name = res.express_redis_cache_name;\n        }\n\n        // If route() was called with a string as its first argument, use this string as name\n\n        if ( typeof options[0] === 'string' ) {\n          name = options[0];\n        }\n\n        if ( typeof options[0] === 'object' && typeof options[0].name === 'string' ) {\n          name = options[0].name;\n        }\n\n        /** Name cannot have wildcards in them */\n\n        if ( /\\*/.test(name) ) {\n          return next(new Error('Name can not have wildcards'));\n        }\n\n        /** The seconds entry lives\n         *\n         *  @type Number\n         *  @default this.expire\n         */\n        var expire = self.expire;\n        if ( typeof options[0] === 'object' ) {\n          if ( typeof options[0].expire === 'number' || typeof options[0].expire === 'object' || typeof options[0].expire === 'function') {\n            expire = options[0].expire;\n          }\n        }\n\n        if ( typeof options[0] === 'number' ) {\n          expire = options[0];\n        }\n        else if ( typeof options[1] === 'number' || typeof options[1] === 'object') {\n          expire = options[1];\n        }\n\n        var binary = false;\n        if ( typeof options[0] === 'object' && typeof options[0].binary === 'boolean' ) {\n          binary = options[0].binary;\n        }\n\n        var expirationPolicy = require('./expire')(expire);\n\n        /** attempt to get cache **/\n        self.get(name, domain.bind(function (error, cache) {\n\n          /** If there was an error with cache then call next **/\n\n          if ( error ) {\n            return next();\n          }\n\n          /** if it's cached, display cache **/\n\n          if ( cache.length ) {\n            res.contentType(cache[0].type || \"text/html\");\n            if(binary){ //Convert back to binary buffer\n              res.send(new Buffer(cache[0].body, 'base64'));\n            }else{\n              res.send(cache[0].body);\n            }\n          }\n\n          /** otherwise, cache request **/\n          else {\n\n            /** wrap res.send **/\n            var send = res.send.bind(res);\n\n            res.send = function (body) {\n\n              /** send output to HTTP client **/\n              var ret = send(body);\n\n              /** convert binary to base64 string **/\n              if(binary && typeof body !== 'string'){\n                body = new Buffer(body).toString('base64');\n              }\n\n              /** save only strings to cache **/\n              if ( typeof body !== 'string' ) {\n                return ret;\n              }\n\n              /** Create the new cache **/\n              self.add(name, body, {\n                  type: this._headers['content-type'],\n                  expire: expirationPolicy(req, res)\n                },\n                domain.intercept(function (name, cache) {}));\n\n              return ret;\n\n            };\n\n            return next();\n          }\n\n        }));\n      };\n    });\n\n    return middleware;\n  }\n\n  return route;\n\n}) ();\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache/size.js":"/**\n\n  cache.ls()\n  ##########\n\n  This script is supposed to be called via `index.js`\n\n**/\n\nmodule.exports = function (\n/* Function */    callback    // Callback\n) {\n\n  /** set in /index.js **/\n  var self = this;\n\n  var domain = require('domain').create();\n\n  domain.on('error', function (error) {\n    callback(error);\n  });\n\n  domain.run(function () {\n\n    /** Tell Redis to fetch the keys name beginning by prefix **/\n    self.client.keys(self.prefix + '*', domain.intercept(function (keys) {\n\n      var size = 0;\n\n      require('async').parallel(\n\n        /** for each keys **/\n\n        keys.map(function (key) {\n          return function (cb) {\n\n            self.get(this.key.replace(new RegExp('^' + self.prefix), ''), cb);\n\n          }\n            .bind({ key: key });\n        }),\n\n        domain.intercept(function (results) {\n          results.forEach(function (result) {\n            size += require('../sizeof')(result);\n          });\n\n          callback(null, size);\n        }));\n\n    }));\n\n  });\n};","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/bin/express-redis-cache.js":"#!/usr/bin/env node\n\nmodule.exports = (function () {\n\n  'use strict';\n\n  require('colors');\n\n  var pkg = require('../package.json');\n\n  var domain = require('domain').create();\n\n  domain.on('error', function (error) {\n    throw error;\n  });\n\n  domain.run(function () {\n\n    /** Get configuration from command line if any **/\n\n    var port, host, prefix, skip = [];\n\n    process.argv = process.argv.map(function (argv, i, all) {\n      if ( argv === '--prefix' && process.argv[(i + 1)] ) {\n        prefix = process.argv[(i + 1)];\n        skip.push(i + 1);\n      }\n\n      else if ( argv === '--port' && process.argv[(i + 1)] ) {\n        port = process.argv[(i + 1)];\n        skip.push(i + 1);\n      }\n\n      else if ( argv === '--host' && process.argv[(i + 1)] ) {\n        host = process.argv[(i + 1)];\n        skip.push(i + 1);\n      }\n\n      else if ( skip.indexOf(i) === -1 ) {\n        return argv;\n      }\n    });\n\n    skip = undefined;\n\n    /** Iniatilize express-redis-cache **/\n\n    var cache;\n\n    function connect () {\n      cache = require('../')({\n        host: host,\n        port: port,\n        prefix: prefix || pkg.config.prefix\n      });\n\n      cache\n\n        .on('error', function (error) {\n          error.stack.split(/\\n/).forEach(function (line) {\n            console.log(line.yellow);\n          });\n        })\n\n        .on('message', function (message) {\n          console.log(message.grey);\n        });\n    }\n\n    /** A function to pretty print a cache entry **/\n\n    function formatEntry (entry) {\n      try {\n        var moment = require('moment');\n\n        var iso = new Date(+entry.touched).toISOString();\n\n        /** Name **/\n        console.log('  ' + entry.name.blue.bold);\n\n        /** Touched **/\n        console.log('    %s    %s', 'touched'.yellow,\n          moment(iso, moment.ISO_8601).fromNow());\n\n        /** Expire **/\n        console.log('    %s    %s', 'expires'.yellow,\n          (function () {\n            if ( entry.expire < 0 || typeof expire === 'undefined' ) {\n              return 'NEVER';\n            }\n            else {\n              var expire = ( +entry.touched + ((+entry.expire || 0) * 1000));\n\n              var iso2 = new Date(expire).toISOString();\n\n              return moment(iso2, moment.ISO_8601).fromNow();\n            }\n          })());\n\n        /** Object size in bytes **/\n        console.log('    %s       %s bytes ' + '%s KB'.grey,\n          'size'.yellow,\n          require('../lib/sizeof')(entry),\n          (require('../lib/sizeof')(entry) / 1024).toFixed(2));\n\n        /** Body length **/\n        console.log('    %s       %s', 'body'.yellow, entry.body.length +\n          ' characters');\n      }\n      catch ( error ) {\n        return console.log('  Not readable'.red, entry, error);\n      }\n    }\n\n    /** Switch action **/\n\n    switch ( process.argv[2] ) {\n\n      /**\n        HELP\n      **/\n\n      case undefined:\n      case '-h':\n      case '--help':\n      case 'help':\n\n        console.log(' express-redis-cache v%s'.yellow, pkg.version);\n        console.log();\n        console.log(' Cache the response of a HTTP request inside a Redis list and let you manage your cache entries'.cyan);\n        console.log();\n        console.log(' Commands:');\n        console.log();\n\n        console.log('  add <name> <content> <expire> --type=<type>'.bold.yellow);\n        console.log('    Add a new cache entry');\n        console.log('     # Cache simple text');\n        console.log('     express-redis-cache add \"test\" \"This is a test\";'.cyan);\n        console.log('     # Cache a file');\n        console.log('     express-redis-cache add \"home\" \"$(cat index.html)\";'.cyan);\n        console.log('     # Cache a JSON object');\n        console.log(\"     express-redis-cache add \\\"user1:location\\\" '{ \\\"lat\\\": 4.7453, \\\"lng\\\": -31.332 }' --type json;\".cyan);\n        console.log('     # Cache a text that will expire in one hour');\n        console.log('     express-redis-cache add \"offer\" \"everything 25% off for the next hour\" $(( 60 * 60 ));'.cyan);\n        console.log();\n\n        console.log('  get <name>'.bold.yellow);\n        console.log('    Get a single cache entry by name');\n        console.log('     # Get all cache entries for default prefix');\n        console.log('     express-redis-cache get'.cyan);\n        console.log();\n\n        console.log('  del <name>'.bold.yellow);\n        console.log('    Delete a cache entry');\n        console.log('     express-redis-cache del favorite-movie'.cyan);\n        console.log();\n\n        console.log('  size'.bold.yellow);\n        console.log('    Get cache size for all entries');\n        console.log();\n\n        console.log(' NOTE'.bold.yellow);\n\n        console.log(' express-redis-cache connects to Redis using localhost as default and Redis default port. You can override that using the options: --port <port> --host <host>. Ditto for --prefix <prefix>.'.cyan);\n\n        console.log();\n\n        break;\n\n      /**\n        LS\n      **/\n\n      case 'ls':\n\n        connect();\n\n        cache.ls(domain.intercept(function (entries) {\n\n          cache.client.quit();\n\n          if ( ! entries.length ) {\n            console.log(' [empty]'.grey);\n          }\n          else {\n            entries.forEach(formatEntry);\n          }\n\n        }));\n        break;\n\n      /**\n        SIZE\n      **/\n\n      case 'size':\n\n        connect();\n\n        cache.size(domain.intercept(function (size) {\n\n          cache.client.quit();\n\n          console.log('Size: %d bytes, %d KB, %d MB',\n            size,\n            (size / 1024).toFixed(2),\n            (size / (1024 * 1024)).toFixed(2));\n\n        }));\n        break;\n\n      /**\n        ADD\n      **/\n\n      case 'add':\n        if ( ! process.argv[3] || ! process.argv[4] ) {\n          throw new Error('Missing arguments');\n        }\n\n        connect();\n\n        cache.add(process.argv[3], process.argv[4], { expire: +process.argv[5] }, domain.intercept(function (name, entry) {\n\n          cache.client.quit();\n\n          entry.name = name;\n\n          formatEntry(entry);\n        }));\n        break;\n\n      /**\n        DEL\n      **/\n\n      case 'del':\n\n        connect();\n\n        cache.del(process.argv[3], domain.intercept(function (occ) {\n\n          cache.client.quit();\n\n          console.log(' %d deletions', occ);\n        }));\n        break;\n\n      /**\n        GET\n      **/\n\n      case 'get':\n\n        connect();\n\n        cache.get(process.argv[3], domain.intercept(function (entries) {\n\n          cache.client.quit();\n\n          entries.forEach(function (entry) {\n            formatEntry(entry);\n          });\n\n        }));\n        break;\n    }\n  });\n\n})();\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/express/server.js":"#!/usr/bin/env node\n\nvar path = require('path');\n\n/* ======== express  ======== */\n\nvar express       = require('express');\nvar app           = express();\n\napp.set('port', process.env.PORT || 3027);\n\n/* ======== cache  ======== */\nvar cache_options = {\n  expire      : 3,\n  host        : process.env.EX_RE_CA_HOST || 'localhost',\n  port        : process.env.EX_RE_CA_PORT || 6379,\n  prefix      : process.env.EX_RE_CA_PREFIX || 'erct:'\n};\n\nvar cache         = require('../')(cache_options);\nvar moment        = require('moment');\n\ncache.on('error', function (error) {\n  console.log('cache error', {\n    message: error.message\n  });\n});\n\n/* ======== body parser  ======== */\n\nvar bodyParser    = require('body-parser');\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\n/* ======== home  ======== */\n\nfunction handle_timestamp (req, res) {\n  res.set({'Content-Type': 'text/json'});\n  var timestamp = { timestamp: moment().unix()};\n  return res.json(timestamp);\n}\n\n// Cache the time for 1 second as\n// { timestamp: 1424309866 }\napp.all('/1sec',\n    cache.route({expire: 1}),\n    handle_timestamp\n);\n\napp.all('/default_expire',\n    cache.route(),\n    handle_timestamp\n);\n\napp.all('/never_expire',\n    cache.route({expire: -1}),\n    handle_timestamp\n);\n\napp.all('/delete_never_expire',\n    function(req, res) {\n      cache.del(\"/never_expire\", function(err, count){\n        if (err) {\n          return res.send(500);\n        }\n        return res.send(\"count:\" + count);\n      });\n\n    }\n);\napp.all('/',\n\n  cache.route(),\n\n\tfunction (req, res) {\n  \tres.send('Now is ' + new Date());\n\t});\n\n/* ======== server  ======== */\n\nvar server = require('http').createServer(app);\n\nserver.listen(app.get('port'), function () {\n  console.log('express-redis-cache test server started on port ' + app.get('port'));\n});\n\nserver.on('error', function (error) {\n  console.log({ 'server error': error });\n});\n","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/sizeof.js":"/*\n\nsizeof.js\n\nA function to calculate the approximate memory usage of objects\n\nCreated by Stephen Morley - http://code.stephenmorley.org/ - and released under\nthe terms of the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\n/* Returns the approximate memory usage, in bytes, of the specified object. The\n * parameter is:\n *\n * object - the object whose size should be determined\n */\nmodule.exports = function sizeof(object){\n\n  // initialise the list of objects and size\n  var objects = [object];\n  var size    = 0;\n  var key;\n\n  // loop over the objects\n  for (var index = 0; index < objects.length; index ++){\n\n    // determine the type of the object\n    switch (typeof objects[index]){\n\n      // the object is a boolean\n      case 'boolean': size += 4; break;\n\n      // the object is a number\n      case 'number': size += 8; break;\n\n      // the object is a string\n      case 'string': size += 2 * objects[index].length; break;\n\n      // the object is a generic object\n      case 'object':\n\n        // if the object is not an array, add the sizes of the keys\n        if (Object.prototype.toString.call(objects[index]) != '[object Array]'){\n          for (key in objects[index]) size += 2 * key.length;\n        }\n\n        // loop over the keys\n        for (key in objects[index]){\n\n          // determine whether the value has already been processed\n          var processed = false;\n          for (var search = 0; search < objects.length; search ++){\n            if (objects[search] === objects[index][key]){\n              processed = true;\n              break;\n            }\n          }\n\n          // queue the value to be processed if appropriate\n          if (!processed) objects.push(objects[index][key]);\n\n        }\n\n    }\n\n  }\n\n  // return the calculated size\n  return size;\n\n};","/home/travis/build/npmtest/node-npmtest-express-redis-cache/node_modules/express-redis-cache/lib/ExpressRedisCache/expire.js":"module.exports = (function () {\n\n  'use strict';\n\n  // Convert HTTP status codes into 1xx, 2xx, 3xx, 4xx, 5xx\n  function maskStatus (statusCode) {\n    return String(statusCode).match(/(\\d)\\d\\d/)[1] + 'xx';\n  }\n\n  // Turn the policy argument into a function that consumes a\n  // status code and returns the expiration value\n  function createExpirationPolicy (options) {\n    if (typeof options !== 'object' && typeof options !== 'number' && typeof options !== 'function') {\n      throw new Error('expire option cannot be type ' + typeof options);\n    }\n\n    // If what's passed in is a function, return the function.\n    if ( typeof options === 'function' ) {\n      return options;\n    }\n\n    // Internally store expiration as an object,\n    // so if a number is provided, use that as the default\n    if ( typeof options === 'number' ) {\n      options = {\n        'xxx': options\n      };\n    }\n\n    for (var k in options) {\n      // Ensure that keys are in the form xxx, 4xx, or 400\n      if (!k.match(/xxx/i) && !k.match(/[1-5]xx/i) && !k.match(/[1-5][0-9]{2}/)) {\n        throw new Error('invalid statusCode ' + k);\n      }\n      // Ensure that the expiration values are numbers\n      if (typeof options[k] !== 'number') {\n        throw new Error('invalid expiration for statusCode ' + k);\n      }\n      // Convert keys to lower case\n      var v = options[k];\n      delete options[v];\n      options[k.toLowerCase()] = v;\n    }\n\n    // Ensure that there is a default so we can always return a value\n    if (!options.hasOwnProperty('xxx')) {\n      throw new Error('no default expiration provided');\n    }\n\n    return function (req, res) {\n      var statusCode = res.statusCode;\n\n      // Look for exact status code matches first\n      if (options.hasOwnProperty(statusCode)) {\n        return options[statusCode];\n      }\n      // Test for a 4xx style match\n      else if (options.hasOwnProperty(maskStatus(statusCode))) {\n        return options[maskStatus(statusCode)];\n      }\n      // Fallback to the default expiration value\n      else {\n        return options.xxx;\n      }\n    };\n  }\n\n  return createExpirationPolicy;\n})();\n"}